name: Multi Platform Builder

on:
  push:
    branches:
      - 'leet-build*'

env:
  target_cpu: "x86-64"
  RUSTFLAGS: "-C target_cpu=x86-64"
  features: "safe"
#  SQLITE3_LIB_DIR: 'C:\vcpkg\installed\x64-windows\lib'
#  VCPKGRS_DYNAMIC: 1
#  SQLITE_STATIC: 1
#  SQLITE3_STATIC: 1

jobs:
  build:
    name: Building Binaries
    strategy:
      matrix:
#        os: [windows-latest]
#        os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-18.04, macos-10.15, windows-2019]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Pre - Prep
      continue-on-error: true  # WARNING: only for this example, remove it!
      shell: bash
      run: |
        printenv
        mkdir -p "$GITHUB_WORKSPACE/binaries/${{ matrix.os }}"
        cd "$GITHUB_WORKSPACE/binaries/${{ matrix.os }}"
        VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/[\"]/, "", $2); printf("%s",$2) }' "$GITHUB_WORKSPACE/applications/tari_base_node/Cargo.toml)"
        BINFILE="tari_base_node-${{ matrix.os }}-$target_cpu-$features-$VERSION"
        echo "Filename is $BINFILE"

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
#        toolchain: stable
        toolchain: nightly-2020-06-10
        components: rustfmt
#        target: ${{ matrix.target }}
        override: true

    - name: Install Linux dependencies
      if: startsWith(matrix.os,'ubuntu')
      run: |
        sudo apt-get update && \
        sudo apt-get -y install \
          openssl \
          libssl-dev \
          pkg-config \
          libsqlite3-dev \
          git \
          cmake \
          libc++-dev \
          libc++abi-dev \
          libprotobuf-dev \
          protobuf-compiler
    - name: Install macOS dependencies
      if: startsWith(matrix.os,'macos')
      run: brew install cmake
    - name: Install Windows dependencies
      if: startsWith(matrix.os,'windows')
      run: |
        vcpkg.exe install sqlite3:x64-windows zlib:x64-windows
        choco upgrade llvm -y

    - name: set environment variables - Nix
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: "!startsWith(matrix.os,'Windows')"
      uses: allenevans/set-env@v1.0.0
      with:
        CC: gcc
        TBN_FILENAME: 'tari_base_node'
    - name: set environment variables - Windows
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: startsWith(matrix.os,'Windows')
      uses: allenevans/set-env@v1.0.0
      with:
        SQLITE3_LIB_DIR: 'C:\vcpkg\installed\x64-windows\lib'
        TBN_FILENAME: 'tari_base_node.exe'
#        RUSTFLAGS: '-Ctarget-feature=+crt-static'
#        CC: gcc

    - name: Build binaries
      continue-on-error: true  # WARNING: only for this example, remove it!
      run: |
        printenv
        cd applications/tari_base_node
        cargo build --release --bin tari_base_node --features $features

    - name: Prep binaries
      continue-on-error: true  # WARNING: only for this example, remove it!
      shell: bash
      run: |
        printenv
        mkdir -p "$GITHUB_WORKSPACE/binaries/${{ matrix.os }}"
        cd "$GITHUB_WORKSPACE/binaries/${{ matrix.os }}"
        VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/[\"]/, "", $2); printf("%s",$2) }' "$GITHUB_WORKSPACE/applications/tari_base_node/Cargo.toml)"
        BINFILE="tari_base_node-${{ matrix.os }}-$target_cpu-$features-$VERSION"
        echo "Filename is $BINFILE"
        cp -v "$GITHUB_WORKSPACE/target/release/tari_base_node" ./$BINFILE
#        bzip2 -f $BINFILE
#        sha256sum $BINFILE.bz2 >> $BINFILE.bz2.sha256
    - name: Upload Nix binary
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v2
      with:
        name: tari_base_node - release - ${{ matrix.os }} - ${{ env.target_cpu }} - ${{ env.features }}
        path: '${{ github.workspace }}/target/release/tari_base_node'
    - name: Upload Windows binary
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v2
      with:
        name: tari_base_node - release - ${{ matrix.os }} - ${{ env.target_cpu }} - ${{ env.features }}
        path: '${{ github.workspace }}/target/release/tari_base_node.exe'
