name: Multi Platform Builder

on:
  push:
    branches:
      - 'leet-build*'

env:
  target_cpu: "x86-64"
  RUSTFLAGS: "-C target_cpu=x86-64"
  features: "safe"
#  SQLITE3_LIB_DIR: 'C:\vcpkg\installed\x64-windows\lib'
#  VCPKGRS_DYNAMIC: 1
#  SQLITE_STATIC: 1
#  SQLITE3_STATIC: 1

jobs:
  build:
    name: Building Binaries
    strategy:
      matrix:
#        os: [windows-latest]
#        os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-18.04]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2
    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
#        toolchain: stable
        toolchain: nightly-2020-06-10
        components: rustfmt
#        target: ${{ matrix.target }}
        override: true
    # Install OS specific dependencies
    - name: Install Linux dependencies
      if: startsWith(matrix.os,'ubuntu')
#      if: runner.os != 'Windows'
#      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update && \
        sudo apt-get -y install \
          openssl \
          libssl-dev \
          pkg-config \
          libsqlite3-dev \
          git \
          cmake \
          libc++-dev \
          libc++abi-dev \
          libprotobuf-dev \
          protobuf-compiler
    - name: Install macOS dependencies
      if: matrix.os == 'macOS-latest'
      run: brew install cmake
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg.exe install sqlite3:x64-windows zlib:x64-windows
        choco upgrade llvm -y
#        vcpkg.exe integrate install
#        vcpkg.exe list
#        vcpkg.exe integrate install
#        choco install tor bzip2
#        vcpkg_cli probe -l static sqlite3
#    - name: Debug Helper - Top
#      continue-on-error: true  # WARNING: only for this example, remove it!
#      shell: bash
#      run: |
#        ls -la '${{ github.workspace }}'
#        ls -la 'C:\vcpkg\installed\x64-windows\lib'
#        find 'C:\' -iname sqlite3.lib
#        find 'D:\' -iname sqlite3.lib
    - name: Build binaries - Nix
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: matrix.os != 'windows-latest'
      uses: actions-rs/cargo@v1
      env:
        CC: gcc
      with:
        command: build
        args: --release --features $features
    - name: Build binaries - Windows
      continue-on-error: true  # WARNING: only for this example, remove it!
      if: matrix.os == 'windows-latest'
      uses: actions-rs/cargo@v1
      env:
        SQLITE3_LIB_DIR: 'C:\vcpkg\installed\x64-windows\lib'
#        RUSTFLAGS: '-Ctarget-feature=+crt-static'
      with:
        command: build
        args: --release
#        args: --release --verbose
#    - name: Debug Helper - Bottom
#      continue-on-error: true  # WARNING: only for this example, remove it!
#      shell: bash
#      run: |
#        ls -la '${{ github.workspace }}'
#        ls -la 'C:\vcpkg\installed\x64-windows\lib'
#        ls -la '${{ github.workspace }}/target/release/'
#        find 'C:\' -iname sqlite3.lib
#        find 'D:\' -iname sqlite3.lib
#        ls -la '${{ github.workspace }}/target/release/'
#        ls -la "${{ github.workspace }}/target/release/"{tari_base_node,tari_base_node.exe}
    - name: Upload Nix binary
      if: runner.os != 'Windows'
#      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: tari_base_node - release - ${{ matrix.os }} - $target_cpu - $features
        path: '${{ github.workspace }}/target/release/tari_base_node'
    - name: Upload Windows binary
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: tari_base_node - release - ${{ matrix.os }}
        path: '${{ github.workspace }}/target/release/tari_base_node.exe'
